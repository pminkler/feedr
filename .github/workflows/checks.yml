name: CI Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ main ]

# Global defaults
env:
  NODE_VERSION: 'lts/*'

jobs:
  check:
    name: Lint & TypeCheck
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache node_modules and .nuxt
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            .nuxt
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-
      
      # Only run npm ci if cache miss
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      
      # Prepare Nuxt to generate .nuxt directory
      - name: Prepare Nuxt
        run: npx nuxt prepare
      
      - name: Run code quality checks
        run: npm run check

  unit-tests:
    name: Unit Tests
    needs: check
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache node_modules and .nuxt
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            .nuxt
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-
      
      # Only run npm ci if cache miss
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Run unit tests
        run: npm test
      
      - name: Verify test failures
        run: npm run test:verify-failures
  
  deploy-backend:
    name: Deploy Backend
    needs: unit-tests
    if: github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'main')
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache node_modules and .nuxt
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            .nuxt
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-
      
      # Only run npm ci if cache miss
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        
      # Cache Amplify outputs
      - name: Cache Amplify outputs
        uses: actions/cache@v4
        id: cache-amplify
        with:
          path: amplify_outputs.json
          key: amplify-${{ github.sha }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set CI environment variable
        run: |
          echo "CI=1" >> $GITHUB_ENV
      
      - name: Deploy Amplify backend
        env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "Deploying Amplify backend for branch: $BRANCH_NAME"
          npx ampx pipeline-deploy --branch $BRANCH_NAME --app-id $AMPLIFY_APP_ID
          
          # Generate outputs for frontend
          npx ampx generate outputs --branch $BRANCH_NAME --app-id $AMPLIFY_APP_ID
  
  e2e-tests:
    name: E2E Tests
    needs: [unit-tests, deploy-backend]
    if: always() && (needs.unit-tests.result == 'success') && (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped') && (github.ref_name == 'develop' || github.ref_name == 'main')
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    container:
      image: mcr.microsoft.com/playwright:v1.51.0-jammy
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache node_modules and .nuxt
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            .nuxt
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-
      
      # Only run npm ci if cache miss
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        
      # Restore Amplify outputs from cache if available
      - name: Restore Amplify Cache
        uses: actions/cache@v4
        if: github.event_name == 'push'
        id: cache-amplify
        with:
          path: amplify_outputs.json
          key: amplify-${{ github.sha }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set CI environment variable
        run: |
          echo "CI=1" >> $GITHUB_ENV
      
      - name: Generate Amplify outputs
        env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "Generating Amplify outputs for branch: $BRANCH_NAME"
          npx ampx generate outputs --branch $BRANCH_NAME --app-id $AMPLIFY_APP_ID
      
      # Generate the static site for testing
      - name: Generate static site
        env:
          NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
        run: npm run generate
      
      # No need to install browsers - they come pre-installed in the Playwright Docker image
      
      - name: Run Playwright tests (Chromium and WebKit)
        run: npx playwright test --project chromium webkit --max-failures=1
      
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
  trigger-frontend:
    name: Trigger Frontend Build
    if: github.event_name == 'push' && success()
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Trigger frontend build via webhook
        run: |
          # Determine which webhook to use based on branch
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            WEBHOOK_URL="${{ secrets.AMPLIFY_MAIN_WEBHOOK_URL }}"
            echo "Triggering main branch build"
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            WEBHOOK_URL="${{ secrets.AMPLIFY_DEVELOP_WEBHOOK_URL }}"
            echo "Triggering develop branch build"
          else
            echo "No webhook configured for branch: ${{ github.ref_name }}"
            exit 0
          fi
          
          # Trigger frontend build via webhook
          curl -X POST -d {} "$WEBHOOK_URL" -H "Content-Type:application/json"